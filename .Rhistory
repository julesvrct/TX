m=dim(trips[[index]])[1]
a=vector()
for(k in 1:m)
{
print(k)
a <-  c(a,sqrt((trips[[index]]$X[k + 1]-trips[[index]]$X[k])^2+(trips[[index]]$Y[k + 1]-trips[[index]]$Y[k])^2))
}
a[is.na(a)]<-0
dist[[index]]=a
if(m==0)
sinuo[index]=0
else if(sqrt((trips[[index]]$X[m]-trips[[index]]$X[1])^2+(trips[[index]]$Y[m]-trips[[index]]$Y[1])^2)!=0)
sinuo[index]=sum(dist[[index]])/(1.3*sqrt((trips[[index]]$X[m]-trips[[index]]$X[1])^2+(trips[[index]]$Y[m]-trips[[index]]$Y[1])^2))
else
sinuo[index]=0
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
for (i in 1:nrow(info_trips))
{ obj=trips_speeds
info_trips[i,2] = sum(obj[[i]])/length(obj[[i]])
info_trips[i,3]=sd (obj[[i]])
info_trips[i,4]=getmode(obj[[i]])
info_trips[i,5]=max((obj[[i]]))
info_trips[i,6]=max(obj[[i]][-which(obj[[i]]==info_trips[i,5])])
info_trips[i,7]=max(obj[[i]][-c(which(obj[[i]]==info_trips[i,5]),which(obj[[i]]==info_trips[i,6]))])
info_trips[i,8]=min((obj[[i]]))
info_trips[i,9]=min(obj[[i]][-which(obj[[i]]==info_trips[i,8])])
info_trips[i,10]=min(obj[[i]][-c(which(obj[[i]]==info_trips[i,8]),which(obj[[i]]==info_trips[i,9]))])
info_trips[i,11]=max((obj[[i]]))-min((obj[[i]]))
info_trips[i,12]=quantile(obj[[i]])[[4]]
info_trips[i,13]=quantile(obj[[i]])[[2]]
info_trips[i,14]=quantile(obj[[i]])[[4]]-quantile(obj[[i]])[[2]]
info_trips[i,15]=skewness(obj[[i]])
info_trips[i,16]=kurtosis(obj[[i]])
info_trips[i,17]=sd(obj[[i]])/mean(obj[[i]])
obj=trips_accel
info_trips[i,18] = sum(obj[[i]])/length(obj[[i]])
info_trips[i,19]=sd (obj[[i]])
info_trips[i,20]=getmode(obj[[i]])
info_trips[i,21]=max((obj[[i]]))
info_trips[i,22]=max(obj[[i]][-which(obj[[i]]==info_trips[i,5])])
info_trips[i,23]=max(obj[[i]][-c(which(obj[[i]]==info_trips[i,5]),which(obj[[i]]==info_trips[i,6]))])
info_trips[i,24]=min((obj[[i]]))
info_trips[i,25]=min(obj[[i]][-which(obj[[i]]==info_trips[i,8])])
info_trips[i,26]=min(obj[[i]][-c(which(obj[[i]]==info_trips[i,8]),which(obj[[i]]==info_trips[i,9]))])
info_trips[i,27]=max((obj[[i]]))-min((obj[[i]]))
info_trips[i,28]=quantile(obj[[i]])[[4]]
info_trips[i,29]=quantile(obj[[i]])[[2]]
info_trips[i,30]=quantile(obj[[i]])[[4]]-quantile(obj[[i]])[[2]]
info_trips[i,31]=skewness(obj[[i]])
info_trips[i,32]=kurtosis(obj[[i]])
info_trips[i,33]=sd(obj[[i]])/mean(obj[[i]])
obj=turnrate
info_trips[i,34] = sum(obj[[i]])/length(obj[[i]])
info_trips[i,35]=sd (obj[[i]])
info_trips[i,36]=getmode(obj[[i]])
info_trips[i,37]=max((obj[[i]]))
info_trips[i,38]=max(obj[[i]][-which(obj[[i]]==info_trips[i,5])])
info_trips[i,39]=max(obj[[i]][-c(which(obj[[i]]==info_trips[i,5]),which(obj[[i]]==info_trips[i,6]))])
info_trips[i,40]=min((obj[[i]]))
info_trips[i,41]=min(obj[[i]][-which(obj[[i]]==info_trips[i,8])])
info_trips[i,42]=min(obj[[i]][-c(which(obj[[i]]==info_trips[i,8]),which(obj[[i]]==info_trips[i,9]))])
info_trips[i,43]=max((obj[[i]]))-min((obj[[i]]))
info_trips[i,44]=quantile(obj[[i]])[[4]]
info_trips[i,45]=quantile(obj[[i]])[[2]]
info_trips[i,46]=quantile(obj[[i]])[[4]]-quantile(obj[[i]])[[2]]
info_trips[i,47]=skewness(obj[[i]])
info_trips[i,48]=kurtosis(obj[[i]])
info_trips[i,49]=sd(obj[[i]])/mean(obj[[i]])
obj=sinuo
info_trips[i,50] = sum(obj[[i]])/length(obj[[i]])
info_trips[i,51]=sd (obj[[i]])
info_trips[i,52]=getmode(obj[[i]])
info_trips[i,53]=max((obj[[i]]))
info_trips[i,54]=max(obj[[i]][-which(obj[[i]]==info_trips[i,5])])
info_trips[i,55]=max(obj[[i]][-c(which(obj[[i]]==info_trips[i,5]),which(obj[[i]]==info_trips[i,6]))])
info_trips[i,56]=min((obj[[i]]))
info_trips[i,57]=min(obj[[i]][-which(obj[[i]]==info_trips[i,8])])
info_trips[i,58]=min(obj[[i]][-c(which(obj[[i]]==info_trips[i,8]),which(obj[[i]]==info_trips[i,9]))])
info_trips[i,59]=max((obj[[i]]))-min((obj[[i]]))
info_trips[i,60]=quantile(obj[[i]])[[4]]
info_trips[i,61]=quantile(obj[[i]])[[2]]
info_trips[i,62]=quantile(obj[[i]])[[4]]-quantile(obj[[i]])[[2]]
info_trips[i,63]=skewness(obj[[i]])
info_trips[i,64]=kurtosis(obj[[i]])
info_trips[i,65]=sd(obj[[i]])/mean(obj[[i]])
}
plot(info_trips$id,info_trips$mean_speed)
box = boxplot(info_trips$max_speed)
summary(info_trips)
info_trips = info_trips[-which(is.na(info_trips$mean_speed)),]
summary(info_trips)
summary(info_trips$top1_speed)
summary(info_trips$min_speed)
summary(info_trips$min1_speed)
trips
compiegne_data
compiegne_data$mode
table(compiegne_data$mode)
source('functions/world_data.R')
dataset
library(data.table)
install.packages("data.table")
library(data.table)
#We now want to select the data from Compiegne's area
world_data = dataset
world_data = unique(setDT(world_data), by = c("id", "date"))
source('functions/LongLatToUTM.R')
source('functions/vitesse_UTM.R')
source('functions/Angle.R')
library(plyr)
library(e1071)
world_data=unique(world_data)
UTM <- LongLatToUTM(world_data$lng,world_data$lat,31)
world_data$X<- UTM$X
world_data$Y<- UTM$Y
X <- split(world_data, world_data$id, drop=TRUE)
trips<-list(data.frame())
trips
world_data
world_data
world_data$X<- UTM$X
world_data
world_data$Y<- UTM$Y
X <- split(world_data, world_data$id, drop=TRUE)
X
trips<-list(data.frame())
trips
for(i in 1:length(X))
{
for ( j in 1:length((split(X[[i]], cumsum (X[[i]]$mode == 10)))))
{
trips[[j]] = split(X[[i]], cumsum (X[[i]]$mode == 10))[[j]]
}
}
for (j in 1:length(trips))
{
trips[[j]]=trips[[j]][-1,]
}
for (k in 1:length(trips))
{
trips[[k]] = trips[[k]][order(trips[[k]]$date),]
}
for (k in 1:length(trips))
{
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==9),]
}
n=vector()
for (k in 1:length(trips))
{
if(nrow(trips[[k]])<2)
n=c(n,k)
}
trips=trips[-n]
trips
trips<-list(data.frame())
for(i in 1:length(X))
{
for ( j in 1:length((split(X[[i]], cumsum (X[[i]]$mode == 10)))))
{
trips[[j]] = split(X[[i]], cumsum (X[[i]]$mode == 10))[[j]]
}
}
for (j in 1:length(trips))
{
trips[[j]]=trips[[j]][-1,]
}
for (k in 1:length(trips))
{
trips[[k]] = trips[[k]][order(trips[[k]]$date),]
}
trips
rips[[k]]
trips[[k]]
trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]][-which(trips[[k]][,0]==3),]
trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]][,5]
trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]][-which(trips[[k]][,5]==9),]
k
trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]][which(trips[[k]][,5]==9),]
trips[[k]][-which(trips[[k]][,5]==9),]
trips[[k]][-which(trips[[k]][,5]==3),]
trips[[469]]
trips[[46]]
trips[[k]][-which(trips[[k]][,5]==),]
k=46
trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]][-which(trips[[k]][,5]==9),]
k=469
trips[[k]][-which(trips[[k]][,5]==9),]
trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]]
trips[[k]][-which(trips[[k]][,5]==9),]
trips[[k]][-which(trips[[k]][,5]==3),]
trips[[55]]
k=55
trips[[k]][-which(trips[[k]][,5]==3),]
for (k in 1:length(trips))
{
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==9),]
}
for (k in 1:length(trips))
{
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==3),]
}
length(trips)
showtraceback
for (k in 1:length(trips))
{
trips[[k]][-which(trips[[k]][,5]==3),]
}
for (k in 1:length(trips))
{
trips[[k]][which(trips[[k]][,5]==3),]
}
for (k in 1:length(trips))
{
trips[[k]][which(trips[[k]][,5]==3),]
}
for (k in 1:length(trips))
{
as.data.frame(trips[[k]][which(trips[[k]][,5]==3),])
}
as.matrix((as.data.frame(trips)))
as.matrix((as.data.frame(trips[[]])))
as.matrix((as.data.frame(trips[[1]])))
as.matrix((as.data.frame(trips[[120]])))
for (k in 1:length(trips))
{as.matrix((as.data.frame(trips[[k]])))
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==9),]
}
as.matrix((as.data.frame(trips[[120]])))
k)=
k=1200
k=120
as.matrix((as.data.frame(trips[[k]])))
for (k in 1:length(trips))
{trips[[k]]=as.matrix((as.data.frame(trips[[k]])))
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==9),]
}
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]]
trips[[k]][,5]
trips[[k],5]
trips[[k,5]]
trips[[k]]
trips[[k]]$lat
trips[[k]][1]
trips[[k]][5]
trips[[155]][5]
trips[[15]][5]
trips[[16]][5]
trips[[1]][5]
trips<-list(data.frame())
for(i in 1:length(X))
{
for ( j in 1:length((split(X[[i]], cumsum (X[[i]]$mode == 10)))))
{
trips[[j]] = split(X[[i]], cumsum (X[[i]]$mode == 10))[[j]]
}
}
world_data
compiegne_data
world_data
head(compiegne_data)
head(world_data)
#DATASET SUCCESSFULLY CREATED
#-------------------------------
dataset
compiegne_data
dataset <- mobility
dataset
mobility <- data.frame(id,date,lat,lng,mode,transportation_mode)
mobility
#We now want to select the data from Compiegne's area
world_data = mobility
world_data
world_data = unique(setDT(world_data), by = c("id", "date"))
world_data
as.data.frame(world_data)
world_data=as.data.frame(world_data)
world_data
source('functions/world_data.R')
source('functions/LongLatToUTM.R')
source('functions/vitesse_UTM.R')
source('functions/Angle.R')
library(plyr)
library(e1071)
world_data=unique(world_data)
world_data
UTM <- LongLatToUTM(world_data$lng,world_data$lat,31)
world_data$X<- UTM$X
world_data$Y<- UTM$Y
X <- split(world_data, world_data$id, drop=TRUE)
trips<-list(data.frame())
for(i in 1:length(X))
{
for ( j in 1:length((split(X[[i]], cumsum (X[[i]]$mode == 10)))))
{
trips[[j]] = split(X[[i]], cumsum (X[[i]]$mode == 10))[[j]]
}
}
for (j in 1:length(trips))
{
trips[[j]]=trips[[j]][-1,]
}
for (k in 1:length(trips))
{
trips[[k]] = trips[[k]][order(trips[[k]]$date),]
}
for (k in 1:length(trips))
{
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==3),]
trips[[k]] = trips[[k]][-which(trips[[k]][,5]==9),]
}
n=vector()
for (k in 1:length(trips))
{
if(nrow(trips[[k]])<2)
n=c(n,k)
}
trips=trips[-n]
trips
info_trips = data.frame(id=c(1:length(trips)), mean_speed=NA, std_speed=NA, mode_speed=NA, top1_speed=NA,top2_speed=NA,top3_speed=NA, min1_speed=NA,min2_speed=NA,min3_speed=NA, range_speed=NA, upq_speed=NA,lowq_speed=NA, Intq_speed=NA,Skew_speed=NA,Kurtosis_speed=NA, Coefvar_speed=NA
, mean_accel=NA, std_accel=NA, mode_accel=NA, top1_accel=NA,top2_accel=NA,top3_accel=NA, min1_accel=NA,min2_speed=NA,min3_accel=NA, range_accel=NA, upq_accel=NA,lowq_accel=NA, Intq_accel=NA,Skew_accel=NA,Kurtosis_accel=NA, Coefvar_accel=NA
, mean_turn=NA, std_turn=NA, mode_turn=NA, top1_turn=NA,top2_turn=NA,top3_turn=NA, min1_turn=NA,min2_turn=NA,min3_turn=NA, range_turn=NA, upq_turn=NA,lowq_turn=NA, Intq_turn=NA,Skew_turn=NA,Kurtosis_turn=NA, Coefvar_turn=NA
)
## Vitesse
trips_speeds = list(vector())
index = 0
for (t in trips)
{
index = index + 1
v = vector()
for (i in 1:(length(t$id)-1))
{
if(is.null(vitesse_UTM(t[i,],t[i+1,]))  )
{
trips[[index]]=trips[[index]][-i,]
}
else if(dim(t)[1]<2)
{
trips[[index]]=trips[[index]][-i,]
}
else if((!is.na(vitesse_UTM(t[i,],t[i+1,])) && vitesse_UTM(t[i,],t[i+1,]) >120 ))
{
trips[[index]]=trips[[index]][-i,]
}
else
{
v = c(v,vitesse_UTM(t[i,],t[i+1,]))
}
}
trips_speeds[[index]] = v
}
##Accceleration
trips_accel = list(vector())
index = 0
for (t in trips)
{
index = index + 1
n=length(trips_speeds[[index]])
m=length(trips[[index]])-1
a= vector()
for (k in 1:n-1)
{
if(0==0)
{
print(k)
a=c(a,(trips_speeds[[index]][k+1]-trips_speeds[[index]][k])/(as.double((trips[[index]][k+2,2]-trips[[index]][k,2]), units='hours')/2))
}
}
a[is.na(a)]<-0
trips_accel[[index]]=a
}
##Turn angle
course=list(vector())
turnrate=list(vector())
index=0
for (t in trips) {
index=index+1
m=dim(trips[[index]])[1]-1
a=vector()
for(k in 1:m)
{
print(k)
a <- c(a,angle(c(trips[[index]]$lat[k + 1],trips[[index]]$lng[k + 1]), c(trips[[index]]$lat[k],trips[[index]]$lng[k])))
}
a[is.na(a)]<-0
course[[index]]=a
b=vector()
for (k in 1:length(course[[index]])-1) {
b=c(b,(course[[index]][k+1]-course[[index]][k])/(as.double((trips[[index]][k+1,2]-trips[[index]][k,2]), units='secs')))
}
b[is.na(b)]<-0
turnrate[[index]]=b
}
sinuo=vector()
dist=list(vector())
index=0
for (t in trips) {
index=index+1
m=dim(trips[[index]])[1]
a=vector()
for(k in 1:m)
{
print(k)
a <-  c(a,sqrt((trips[[index]]$X[k + 1]-trips[[index]]$X[k])^2+(trips[[index]]$Y[k + 1]-trips[[index]]$Y[k])^2))
}
a[is.na(a)]<-0
dist[[index]]=a
if(m==0)
sinuo[index]=0
else if(sqrt((trips[[index]]$X[m]-trips[[index]]$X[1])^2+(trips[[index]]$Y[m]-trips[[index]]$Y[1])^2)!=0)
sinuo[index]=sum(dist[[index]])/(1.3*sqrt((trips[[index]]$X[m]-trips[[index]]$X[1])^2+(trips[[index]]$Y[m]-trips[[index]]$Y[1])^2))
else
sinuo[index]=0
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
for (i in 1:nrow(info_trips))
{ obj=trips_speeds
info_trips[i,2] = sum(obj[[i]])/length(obj[[i]])
info_trips[i,3]=sd (obj[[i]])
info_trips[i,4]=getmode(obj[[i]])
info_trips[i,5]=max((obj[[i]]))
info_trips[i,6]=max(obj[[i]][-which(obj[[i]]==info_trips[i,5])])
info_trips[i,7]=max(obj[[i]][-c(which(obj[[i]]==info_trips[i,5]),which(obj[[i]]==info_trips[i,6]))])
info_trips[i,8]=min((obj[[i]]))
info_trips[i,9]=min(obj[[i]][-which(obj[[i]]==info_trips[i,8])])
info_trips[i,10]=min(obj[[i]][-c(which(obj[[i]]==info_trips[i,8]),which(obj[[i]]==info_trips[i,9]))])
info_trips[i,11]=max((obj[[i]]))-min((obj[[i]]))
info_trips[i,12]=quantile(obj[[i]])[[4]]
info_trips[i,13]=quantile(obj[[i]])[[2]]
info_trips[i,14]=quantile(obj[[i]])[[4]]-quantile(obj[[i]])[[2]]
info_trips[i,15]=skewness(obj[[i]])
info_trips[i,16]=kurtosis(obj[[i]])
info_trips[i,17]=sd(obj[[i]])/mean(obj[[i]])
obj=trips_accel
info_trips[i,18] = sum(obj[[i]])/length(obj[[i]])
info_trips[i,19]=sd (obj[[i]])
info_trips[i,20]=getmode(obj[[i]])
info_trips[i,21]=max((obj[[i]]))
info_trips[i,22]=max(obj[[i]][-which(obj[[i]]==info_trips[i,5])])
info_trips[i,23]=max(obj[[i]][-c(which(obj[[i]]==info_trips[i,5]),which(obj[[i]]==info_trips[i,6]))])
info_trips[i,24]=min((obj[[i]]))
info_trips[i,25]=min(obj[[i]][-which(obj[[i]]==info_trips[i,8])])
info_trips[i,26]=min(obj[[i]][-c(which(obj[[i]]==info_trips[i,8]),which(obj[[i]]==info_trips[i,9]))])
info_trips[i,27]=max((obj[[i]]))-min((obj[[i]]))
info_trips[i,28]=quantile(obj[[i]])[[4]]
info_trips[i,29]=quantile(obj[[i]])[[2]]
info_trips[i,30]=quantile(obj[[i]])[[4]]-quantile(obj[[i]])[[2]]
info_trips[i,31]=skewness(obj[[i]])
info_trips[i,32]=kurtosis(obj[[i]])
info_trips[i,33]=sd(obj[[i]])/mean(obj[[i]])
obj=turnrate
info_trips[i,34] = sum(obj[[i]])/length(obj[[i]])
info_trips[i,35]=sd (obj[[i]])
info_trips[i,36]=getmode(obj[[i]])
info_trips[i,37]=max((obj[[i]]))
info_trips[i,38]=max(obj[[i]][-which(obj[[i]]==info_trips[i,5])])
info_trips[i,39]=max(obj[[i]][-c(which(obj[[i]]==info_trips[i,5]),which(obj[[i]]==info_trips[i,6]))])
info_trips[i,40]=min((obj[[i]]))
info_trips[i,41]=min(obj[[i]][-which(obj[[i]]==info_trips[i,8])])
info_trips[i,42]=min(obj[[i]][-c(which(obj[[i]]==info_trips[i,8]),which(obj[[i]]==info_trips[i,9]))])
info_trips[i,43]=max((obj[[i]]))-min((obj[[i]]))
info_trips[i,44]=quantile(obj[[i]])[[4]]
info_trips[i,45]=quantile(obj[[i]])[[2]]
info_trips[i,46]=quantile(obj[[i]])[[4]]-quantile(obj[[i]])[[2]]
info_trips[i,47]=skewness(obj[[i]])
info_trips[i,48]=kurtosis(obj[[i]])
info_trips[i,49]=sd(obj[[i]])/mean(obj[[i]])
obj=sinuo
info_trips[i,50] = sum(obj[[i]])/length(obj[[i]])
info_trips[i,51]=sd (obj[[i]])
info_trips[i,52]=getmode(obj[[i]])
info_trips[i,53]=max((obj[[i]]))
info_trips[i,54]=max(obj[[i]][-which(obj[[i]]==info_trips[i,5])])
info_trips[i,55]=max(obj[[i]][-c(which(obj[[i]]==info_trips[i,5]),which(obj[[i]]==info_trips[i,6]))])
info_trips[i,56]=min((obj[[i]]))
info_trips[i,57]=min(obj[[i]][-which(obj[[i]]==info_trips[i,8])])
info_trips[i,58]=min(obj[[i]][-c(which(obj[[i]]==info_trips[i,8]),which(obj[[i]]==info_trips[i,9]))])
info_trips[i,59]=max((obj[[i]]))-min((obj[[i]]))
info_trips[i,60]=quantile(obj[[i]])[[4]]
info_trips[i,61]=quantile(obj[[i]])[[2]]
info_trips[i,62]=quantile(obj[[i]])[[4]]-quantile(obj[[i]])[[2]]
info_trips[i,63]=skewness(obj[[i]])
info_trips[i,64]=kurtosis(obj[[i]])
info_trips[i,65]=sd(obj[[i]])/mean(obj[[i]])
}
plot(info_trips$id,info_trips$mean_speed)
box = boxplot(info_trips$max_speed)
plot(info_trips$id,info_trips$mean_speed)
box = boxplot(info_trips$max_speed)
box = boxplot(info_trips$top1_speed)
box = boxplot(info_trips$mean_speed)
summary(info_trips)
save.image("D:/Git tx/TX/environment.RData")
